// <auto-generated />
using System;
using ApiSults.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiSults.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApiSultsContext))]
    [Migration("20250223184754_AddTriggerLimitConfigurationInsert")]
    partial class AddTriggerLimitConfigurationInsert
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiSults.Domain.ConfigurationModule.Configuration", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("CONFIGURATION_ID");

                    b.Property<bool>("AutomaticAtualizationEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("CONFIGURATION_ATUALIZATION_ENABLED");

                    b.Property<int>("AutomaticAtualizationIntervalInMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("CONFIGURATION_ATUALIZATION_INTERVAL");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CONFIGURATION_KEY");

                    b.Property<DateTime>("LastAtualization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("CONFIGURATION_LAST_ATUALIZATION");

                    b.HasKey("Id");

                    b.ToTable("CONFIGURATION", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AutomaticAtualizationEnabled = true,
                            AutomaticAtualizationIntervalInMinutes = 1,
                            LastAtualization = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApiSults.Domain.Shared.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("LOG_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("LOG_DATE");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOG_LEVEL");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("LOG_MESSAGE");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOG_SOURCE");

                    b.HasKey("Id");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("ApiSults.Domain.TicketsModule.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("TICKET_ID");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2")
                        .HasColumnName("TICKET_COMPLETED");

                    b.Property<int>("CountInteractionInternal")
                        .HasColumnType("int")
                        .HasColumnName("TICKET_COUNT_INTERACTION_INTERNAL");

                    b.Property<int>("CountPublicInteraction")
                        .HasColumnType("int")
                        .HasColumnName("TICKET_COUNT_PUBLIC_INTERACTION");

                    b.Property<int?>("EvaluationNote")
                        .HasColumnType("int")
                        .HasColumnName("TICKET_EVALUATION_NOTE");

                    b.Property<string>("EvaluationObservation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TICKET_EVALUATION_OBSERVATION");

                    b.Property<DateTime?>("FirstInteraction")
                        .HasColumnType("datetime2")
                        .HasColumnName("TICKET_FIRST_INTERACTION");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime2")
                        .HasColumnName("TICKET_LAST_CHANGE");

                    b.Property<DateTime>("Open")
                        .HasColumnType("datetime2")
                        .HasColumnName("TICKET_OPEN");

                    b.Property<DateTime>("ResolveStipulated")
                        .HasColumnType("datetime2")
                        .HasColumnName("TICKET_RESOLVE_STIPULATED");

                    b.Property<DateTime?>("Resolved")
                        .HasColumnType("datetime2")
                        .HasColumnName("TICKET_RESOLVED");

                    b.Property<DateTime>("SolvePlanned")
                        .HasColumnType("datetime2")
                        .HasColumnName("TICKET_SOLVE_PLANNED");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("TICKET_STATUS");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TICKET_TITLE");

                    b.Property<long>("Type")
                        .HasColumnType("bigint")
                        .HasColumnName("TICKET_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("TICKET_ID");

                    b.ToTable("TICKET", (string)null);
                });

            modelBuilder.Entity("ApiSults.Domain.TicketsModule.Ticket", b =>
                {
                    b.OwnsMany("ApiSults.Domain.TicketsModule.ValueObjects.Support", "Supports", b1 =>
                        {
                            b1.Property<int>("SUPPORT_ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnName("SUPPORT_ID");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("SUPPORT_ID"));

                            b1.Property<bool>("PersonUnit")
                                .HasColumnType("bit")
                                .HasColumnName("SUPPORT_PERSON_UNIT");

                            b1.Property<long>("TICKET_ID")
                                .HasColumnType("bigint");

                            b1.HasKey("SUPPORT_ID");

                            b1.HasIndex("TICKET_ID");

                            b1.ToTable("SUPPORT", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TICKET_ID");

                            b1.OwnsOne("ApiSults.Domain.TicketsModule.Person", "Person", b2 =>
                                {
                                    b2.Property<int>("SUPPORT_ID")
                                        .HasColumnType("int");

                                    b2.Property<long>("Id")
                                        .HasColumnType("bigint")
                                        .HasColumnName("SUPPORT_PERSON_ID");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(200)
                                        .IsUnicode(true)
                                        .HasColumnType("nvarchar(200)")
                                        .HasColumnName("SUPPORT_PERSON_NAME");

                                    b2.HasKey("SUPPORT_ID");

                                    b2.ToTable("SUPPORT");

                                    b2.WithOwner()
                                        .HasForeignKey("SUPPORT_ID");
                                });

                            b1.OwnsOne("ApiSults.Domain.TicketsModule.Department", "Department", b2 =>
                                {
                                    b2.Property<int>("SUPPORT_ID")
                                        .HasColumnType("int");

                                    b2.Property<long>("Id")
                                        .HasColumnType("bigint")
                                        .HasColumnName("SUPPORT_DEPARTMENT_ID");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(200)
                                        .HasColumnType("nvarchar(200)")
                                        .HasColumnName("SUPPORT_DEPARTMENT_NAME");

                                    b2.HasKey("SUPPORT_ID");

                                    b2.ToTable("SUPPORT");

                                    b2.WithOwner()
                                        .HasForeignKey("SUPPORT_ID");
                                });

                            b1.Navigation("Department")
                                .IsRequired();

                            b1.Navigation("Person")
                                .IsRequired();
                        });

                    b.OwnsMany("ApiSults.Domain.TicketsModule.ValueObjects.Tag", "Tags", b1 =>
                        {
                            b1.Property<long>("TICKET_ID")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("TAG_ID");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("TAG_COLOR");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("TAG_NAME");

                            b1.HasKey("TICKET_ID", "Id");

                            b1.ToTable("TAG", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TICKET_ID");
                        });

                    b.OwnsOne("ApiSults.Domain.TicketsModule.Applicant", "Applicant", b1 =>
                        {
                            b1.Property<long>("TicketId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("TICKET_APPLICANT_ID");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("TICKET_APPLICANT_NAME");

                            b1.HasKey("TicketId");

                            b1.ToTable("TICKET");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("ApiSults.Domain.TicketsModule.Responsible", "Responsible", b1 =>
                        {
                            b1.Property<long>("TicketId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("TICKET_RESPONSIBLE_ID");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("TICKET_RESPONSIBLE_NAME");

                            b1.HasKey("TicketId");

                            b1.ToTable("TICKET");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("ApiSults.Domain.TicketsModule.Subject", "Subject", b1 =>
                        {
                            b1.Property<long>("TicketId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("TICKET_SUBJECT_ID");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("TICKET_SUBJECT_NAME");

                            b1.HasKey("TicketId");

                            b1.ToTable("TICKET");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("ApiSults.Domain.TicketsModule.Department", "Department", b1 =>
                        {
                            b1.Property<long>("TicketId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("TICKET_DEPARTMENT_ID");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("TICKET_DEPARTMENT_NAME");

                            b1.HasKey("TicketId");

                            b1.HasIndex("Id")
                                .HasDatabaseName("IX_TICKET_DEPARTMENT_ID");

                            b1.ToTable("TICKET");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("ApiSults.Domain.TicketsModule.Unit", "Unit", b1 =>
                        {
                            b1.Property<long>("TicketId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("TICKET_UNIT_ID");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("TICKET_UNIT_NAME");

                            b1.HasKey("TicketId");

                            b1.ToTable("TICKET");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("Applicant")
                        .IsRequired();

                    b.Navigation("Department")
                        .IsRequired();

                    b.Navigation("Responsible")
                        .IsRequired();

                    b.Navigation("Subject")
                        .IsRequired();

                    b.Navigation("Supports");

                    b.Navigation("Tags");

                    b.Navigation("Unit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
